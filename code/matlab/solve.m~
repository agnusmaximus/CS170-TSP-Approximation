function [retvalue] = solve(input_directory,output_directory,tlimitsec)
    % Get all files, process in sorted order
    all_files=dir(strcat(input_directory,'*.in'));
    files={};
    for i=1:length(all_files)
       files{i}=all_files(i).name;
    end
    
    % Files that took too long
    timeout_files={};
    
    % Process files
    validationfilepath=strcat(output_directory,'validation_output');
    validationfile=fopen(validationfilepath,'w');
    n_optimal=0;
    ntimedout=1;
    for i=1:length(files)
        % Debug print
        filepath=strcat(input_directory,char(files(i)));
        fprintf('%s\n',strcat('Processing:',filepath));
        
        % Individual output file
        [pathstr,name,ext]=fileparts(char(files(i)));
        cur_out_file=fopen(strcat(output_directory,name,'.out'),'w');
        fprintf('%s\n',strcat('Writing To:',strcat(output_directory,name,'.out')));
        
        % Solve
        [path,costopt,isopt,exitval]=TSP(filepath,0,tlimitsec);
        
        if exitval==1
            % Write to outputs
            g=sprintf('%d ',path);
            fprintf(cur_out_file,'%s\n',g);
            fprintf(validationfile,'%g\n',costopt);               
        
            % Count optimal answers
            if isopt==true
                n_optimal=n_optimal+1;
            end
        else
            fprintf('Timeout %s\n', filepath);
            timeoutfiles{ntimedout}=filepath;
            ntimedo
            disp(timeoutfiles)
        end
        % Close file
        fclose(cur_out_file);
    end
    fclose(validationfile);
    
    % Print statistics
    fprintf('%d optimal answers out of %d inputs\n',n_optimal,length(files));    
end